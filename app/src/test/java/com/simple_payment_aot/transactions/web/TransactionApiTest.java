/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.simple_payment_aot.transactions.web;

import com.simple_payment_aot.accounts.domain.repositories.AccountRepository;
import com.simple_payment_aot.accounts.web.dtos.CreateAccountRequestDto;
import com.simple_payment_aot.accounts.web.dtos.CreateAccountResponseDto;
import com.simple_payment_aot.transactions.common.AccountNotFoundException;
import com.simple_payment_aot.transactions.domain.repositories.TransactionRepository;
import com.simple_payment_aot.transactions.web.dtos.CreateTransactionRequestDto;
import com.simple_payment_aot.transactions.web.dtos.CreateTransactionResponseDto;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.catchThrowableOfType;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class TransactionApiTest {

    @Value(value="${local.server.port}")
    private int port;

    @Autowired
    private TestRestTemplate restTemplate;

    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private TransactionRepository transactionRepository;

    private String accountEndpoint;
    private String transactionEndpoint;

    @BeforeEach
    public void beforeEach(){
        this.accountEndpoint = "http://localhost:" + port + "/accounts";
        this.transactionEndpoint = "http://localhost:" + port + "/transactions";
        accountRepository.deleteAll();
        transactionRepository.deleteAll();
    }

    @Test
    public void testGivenInitialValidAccountPost_WhenCallTransactionsType2WithNewAccount_ShouldReturn201WithExpectedResult() {
        CreateAccountRequestDto requestCreateAccDto = new CreateAccountRequestDto();
        requestCreateAccDto.setDocumentNumber("12345678901");

        CreateAccountResponseDto responseAcc = this.restTemplate.postForEntity(
                        this.accountEndpoint, requestCreateAccDto, CreateAccountResponseDto.class)
                .getBody();

        CreateTransactionRequestDto requestCreateTrDto = new CreateTransactionRequestDto();
        requestCreateTrDto.setOperationType(2);
        requestCreateTrDto.setAmount("10.30");
        requestCreateTrDto.setAccountId(Integer.parseInt(responseAcc.getAccountId()));

        ResponseEntity<CreateTransactionResponseDto> responseTr = this.restTemplate.postForEntity(
                        this.transactionEndpoint, requestCreateTrDto, CreateTransactionResponseDto.class);


        assertThat(responseTr.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(responseTr.getBody().getTransactionId()).isNotNull();
        assertThat(responseTr.getBody().getAmount()).isEqualTo("-" + requestCreateTrDto.getAmount());
        assertThat(responseTr.getBody().getAccountId()).isEqualTo(requestCreateTrDto.getAccountId());
        assertThat(responseTr.getBody().getOperationType()).isEqualTo(requestCreateTrDto.getOperationType());
    }

    @Test
    public void testGivenInitialValidAccountPost_WhenCallTransactionsType4WithNewAccount_ShouldReturn201WithExpectedResult() {
        CreateAccountRequestDto requestCreateAccDto = new CreateAccountRequestDto();
        requestCreateAccDto.setDocumentNumber("12345678901");

        CreateAccountResponseDto responseAcc = this.restTemplate.postForEntity(
                        this.accountEndpoint, requestCreateAccDto, CreateAccountResponseDto.class)
                .getBody();

        CreateTransactionRequestDto requestCreateTrDto = new CreateTransactionRequestDto();
        requestCreateTrDto.setOperationType(4);
        requestCreateTrDto.setAmount("10.30");
        requestCreateTrDto.setAccountId(Integer.parseInt(responseAcc.getAccountId()));

        ResponseEntity<CreateTransactionResponseDto> responseTr = this.restTemplate.postForEntity(
                this.transactionEndpoint, requestCreateTrDto, CreateTransactionResponseDto.class);


        assertThat(responseTr.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(responseTr.getBody().getTransactionId()).isNotNull();
        assertThat(responseTr.getBody().getAmount()).isEqualTo(requestCreateTrDto.getAmount());
        assertThat(responseTr.getBody().getAccountId()).isEqualTo(requestCreateTrDto.getAccountId());
        assertThat(responseTr.getBody().getOperationType()).isEqualTo(requestCreateTrDto.getOperationType());
    }

    @Test
    public void testGivenNoAccountInDb_WhenCallTransactions_ShouldReturn400() {
        CreateTransactionRequestDto requestCreateTrDto = new CreateTransactionRequestDto();
        requestCreateTrDto.setOperationType(2);
        requestCreateTrDto.setAmount("10.30");
        requestCreateTrDto.setAccountId(1);

        ResponseEntity<String> response = this.restTemplate.postForEntity(
                this.transactionEndpoint, requestCreateTrDto, String.class);

        String message = "Não foi possível criar transação. AccountId informada ("
                .concat(requestCreateTrDto.getAccountId().toString())
                .concat(") não encontrada");
        assertThat(response.getBody()).contains(message);
    }
}
