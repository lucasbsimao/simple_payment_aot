/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.simple_payment_aot.accounts.web;

import com.simple_payment_aot.accounts.domain.repositories.AccountRepository;
import com.simple_payment_aot.accounts.web.dtos.CreateAccountRequestDto;
import com.simple_payment_aot.accounts.web.dtos.CreateAccountResponseDto;
import com.simple_payment_aot.accounts.web.dtos.RetrieveAccountDto;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.*;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class AccountsApiTest {

    @Value(value="${local.server.port}")
    private int port;

    @Autowired
    private TestRestTemplate restTemplate;

    @Autowired
    private AccountRepository accountRepository;

    private String accountEndpoint;

    @BeforeEach
    public void beforeEach(){
        this.accountEndpoint = "http://localhost:" + port + "/accounts";
        accountRepository.deleteAll();
    }

    @Test
    public void testGivenDatabaseIsCleanWhenCallEndpointAccountsShouldReturn404() throws Exception {
        ResponseEntity<RetrieveAccountDto> response = this.restTemplate.exchange(this.accountEndpoint + "/1",
                HttpMethod.GET, getHttpEntity(), RetrieveAccountDto.class);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    }

    @Test
    public void testGivenInitialValidPost_WhenCallEndpointAccountsWithId_ShouldReturn200WithExpectedResult() {
        CreateAccountRequestDto requestDto = new CreateAccountRequestDto();
        requestDto.setDocumentNumber("12345678901");

        CreateAccountResponseDto response = this.restTemplate.postForEntity(
                        this.accountEndpoint, requestDto, CreateAccountResponseDto.class)
                .getBody();


        RetrieveAccountDto retrieve = this.restTemplate.getForEntity(
                        this.accountEndpoint.concat("/") + response.getAccountId(), RetrieveAccountDto.class)
                .getBody();

        assertThat(retrieve).isNotNull();
        assertThat(response).isNotNull();
        assertThat(retrieve.getDocumentNumber()).isEqualTo(response.getDocumentNumber());
        assertThat(retrieve.getAccountId()).isNotNull();
    }

    @Test
    public void testWhenCallEndpointAccountsWithInvalidBody_ShouldReturn400() {
        CreateAccountRequestDto requestDto = new CreateAccountRequestDto();
        requestDto.setDocumentNumber("0123456789"); //Document de 10 digitos

        ResponseEntity<CreateAccountResponseDto> response = this.restTemplate.postForEntity(
                        this.accountEndpoint, requestDto, CreateAccountResponseDto.class);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
    }

    private HttpEntity<String> getHttpEntity() {
        HttpHeaders headers = new HttpHeaders();
        headers.setAccept(
                Collections.singletonList(MediaType.APPLICATION_JSON));
        return new HttpEntity<>(headers);
    }
}
